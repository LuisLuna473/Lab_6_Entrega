
Lab 6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000001f0  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800138  00800138  000002bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000081a  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d0  00000000  00000000  00000b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000344  00000000  00000000  00001266  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000015ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e4  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000de  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001b1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e3       	ldi	r26, 0x38	; 56
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 33       	cpi	r26, 0x3A	; 58
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  9e:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
    }
}

void initUART9600(void){
	//Paso 1: RX como entrada y TX como salida
	DDRD &= ~(1<<DDD0);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2: Confi. UCSR0A
	UCSR0A = 0; 
  b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: Conf. UCSR0B > donde habilitamos ISR de recepción, habilitamos rx y tx
	UCSR0B = 0;
  b6:	e1 ec       	ldi	r30, 0xC1	; 193
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	10 82       	st	Z, r1
	
	UCSR0B |= (1<< RXCIE0) |(1<<RXEN0) |(1<<TXEN0);
  bc:	80 81       	ld	r24, Z
  be:	88 69       	ori	r24, 0x98	; 152
  c0:	80 83       	st	Z, r24
	
	//Paso 4: Cond. UCSR0C > Asyncrono, Paridad: None, 1 bit de Stop, Data bits 8/bits
	UCSR0C = 0; 
  c2:	e2 ec       	ldi	r30, 0xC2	; 194
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
	
	UCSR0C |= (1<< UCSZ01)| (1<< UCSZ00);
  c8:	80 81       	ld	r24, Z
  ca:	86 60       	ori	r24, 0x06	; 6
  cc:	80 83       	st	Z, r24
	
	//Paso #5: Conf. velocidad de Baudrate: 9600
	
	UBRR0 = 103;  
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  da:	08 95       	ret

000000dc <writeTextUART>:
	
}

void writeTextUART(char * Texto){
  dc:	bc 01       	movw	r22, r24
	
	for (int i=0; Texto[i]!='\0'; i++){
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	08 c0       	rjmp	.+16     	; 0xf4 <writeTextUART+0x18>
		while(!(UCSR0A & (1<<UDRE0)));
  e4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e8:	95 ff       	sbrs	r25, 5
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <writeTextUART+0x8>
		UDR0 = Texto[i]; 
  ec:	40 93 c6 00 	sts	0x00C6, r20	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
}

void writeTextUART(char * Texto){
	
	for (int i=0; Texto[i]!='\0'; i++){
  f0:	2f 5f       	subi	r18, 0xFF	; 255
  f2:	3f 4f       	sbci	r19, 0xFF	; 255
  f4:	fb 01       	movw	r30, r22
  f6:	e2 0f       	add	r30, r18
  f8:	f3 1f       	adc	r31, r19
  fa:	40 81       	ld	r20, Z
  fc:	41 11       	cpse	r20, r1
  fe:	f2 cf       	rjmp	.-28     	; 0xe4 <writeTextUART+0x8>
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = Texto[i]; 
	}
}
 100:	08 95       	ret

00000102 <writeUART>:

void writeUART(char Caracter){
	while(!(UCSR0A & (1<<UDRE0)));
 102:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 106:	95 ff       	sbrs	r25, 5
 108:	fc cf       	rjmp	.-8      	; 0x102 <writeUART>
	UDR0 = Caracter; 
 10a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 10e:	08 95       	ret

00000110 <__vector_18>:
}

ISR (USART_RX_vect){
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
	
	bufferTX = UDR0;
 11c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 120:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <bufferTX>
	while(!(UCSR0A & (1<<UDRE0)));
 124:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 128:	85 ff       	sbrs	r24, 5
 12a:	fc cf       	rjmp	.-8      	; 0x124 <__vector_18+0x14>
	UDR0 = bufferTX;
 12c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <bufferTX>
 130:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		writeTextUART("Selecciona una opción valida");
		break;
		
	}*/
	
	PORTB = (bufferTX & 0b00111111);
 134:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <bufferTX>
 138:	8f 73       	andi	r24, 0x3F	; 63
 13a:	85 b9       	out	0x05, r24	; 5
	PORTC = ((bufferTX & 0b11000000)>>6);
 13c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <bufferTX>
 140:	82 95       	swap	r24
 142:	86 95       	lsr	r24
 144:	86 95       	lsr	r24
 146:	83 70       	andi	r24, 0x03	; 3
 148:	88 b9       	out	0x08, r24	; 8
}
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <initADC>:
void initADC(void){
	ADMUX|=(1<<MUX2)|(1<<MUX1);
 156:	ec e7       	ldi	r30, 0x7C	; 124
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	86 60       	ori	r24, 0x06	; 6
 15e:	80 83       	st	Z, r24
	//JUSTIFICACION IZQUIERDA
	ADMUX |= (1<<ADLAR);
 160:	80 81       	ld	r24, Z
 162:	80 62       	ori	r24, 0x20	; 32
 164:	80 83       	st	Z, r24
	//REFERENCIA INTERNA
	ADMUX |= (1<<REFS0);
 166:	80 81       	ld	r24, Z
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	80 83       	st	Z, r24
	// HABILITAR INTERRUPCION
	ADCSRA |= (1<<ADIE);
 16c:	ea e7       	ldi	r30, 0x7A	; 122
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	88 60       	ori	r24, 0x08	; 8
 174:	80 83       	st	Z, r24
	//PRESCALER 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 176:	80 81       	ld	r24, Z
 178:	87 60       	ori	r24, 0x07	; 7
 17a:	80 83       	st	Z, r24
	//HABILITAR
	ADCSRA |= (1<<ADEN);
 17c:	80 81       	ld	r24, Z
 17e:	80 68       	ori	r24, 0x80	; 128
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <main>:
int8_t LOL = 0; 


int main(void)
{
    DDRB = 0x3F;
 184:	8f e3       	ldi	r24, 0x3F	; 63
 186:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x3F;
 188:	87 b9       	out	0x07, r24	; 7
	initUART9600();
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	sei();
 18e:	78 94       	sei
	writeTextUART("Hola Luis Elige una opción");
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 6e 00 	call	0xdc	; 0xdc <writeTextUART>
	writeTextUART("1. Leer Pot");
 198:	8b e1       	ldi	r24, 0x1B	; 27
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 6e 00 	call	0xdc	; 0xdc <writeTextUART>
	writeTextUART("2. Enviar ascii");
 1a0:	87 e2       	ldi	r24, 0x27	; 39
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 6e 00 	call	0xdc	; 0xdc <writeTextUART>
	writeUART(10);
 1a8:	8a e0       	ldi	r24, 0x0A	; 10
 1aa:	0e 94 81 00 	call	0x102	; 0x102 <writeUART>
	writeUART(13);
 1ae:	8d e0       	ldi	r24, 0x0D	; 13
 1b0:	0e 94 81 00 	call	0x102	; 0x102 <writeUART>
	initADC(); 
 1b4:	0e 94 ab 00 	call	0x156	; 0x156 <initADC>
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <main+0x34>

000001ba <__vector_21>:
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
	//HABILITAR
	ADCSRA |= (1<<ADEN);
}

ISR(ADC_vect){
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	8f 93       	push	r24
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31
	LOL = ADCH; 
 1ca:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1ce:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
	ADCSRA |= (1<<ADIF);
 1d2:	ea e7       	ldi	r30, 0x7A	; 122
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	80 61       	ori	r24, 0x10	; 16
 1da:	80 83       	st	Z, r24
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	8f 91       	pop	r24
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
